{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","baseUrl","useState","data","setData","modalInsertar","setModalInsertar","modalEditar","setModalEditar","modalEliminar","setModalEliminar","id","nombre","apellido","edad","alumnoSeleccionado","setalumnoSeleccionado","handleChange","e","target","name","value","prevState","console","log","abrirCerrarModalInsertar","abrirCerrarModalEditar","abrirCerrarModalEliminar","peticionGet","a","axios","get","then","response","catch","error","peticionPost","f","FormData","append","post","concat","peticionPut","params","dataNueva","map","alumno","peticionDelete","filter","seleccionarAlumno","caso","useEffect","style","textAlign","className","onClick","key","Modal","isOpen","ModalHeader","ModalBody","type","onChange","ModalFooter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.206f7762.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\nimport axios from 'axios';\n\nfunction App() {\n  const baseUrl=\"http://localhost:8080/apiPhpEscuela/\";\n  const [data, setData]=useState([]);\n  const [modalInsertar, setModalInsertar]= useState(false);\n  const [modalEditar, setModalEditar]= useState(false);\n  const [modalEliminar, setModalEliminar]= useState(false);\n  const [alumnoSeleccionado, setalumnoSeleccionado]=useState({\n    id: '',\n    nombre: '',\n    apellido: '',\n    edad: ''\n  });\n\n  const handleChange=e=>{\n    const {name, value}=e.target;\n    setalumnoSeleccionado((prevState)=>({\n      ...prevState,\n      [name]: value\n    }))\n    console.log(alumnoSeleccionado);\n  }\n\n  const abrirCerrarModalInsertar=()=>{\n    setModalInsertar(!modalInsertar);\n  }\n\n  const abrirCerrarModalEditar=()=>{\n    setModalEditar(!modalEditar);\n  }\n\n  const abrirCerrarModalEliminar=()=>{\n    setModalEliminar(!modalEliminar);\n  }\n\n  const peticionGet=async()=>{\n    await axios.get(baseUrl)\n    .then(response=>{\n      setData(response.data);\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionPost=async()=>{\n    var f = new FormData();\n    f.append(\"nombre\", alumnoSeleccionado.nombre);\n    f.append(\"apellido\", alumnoSeleccionado.apellido);\n    f.append(\"edad\", alumnoSeleccionado.edad);\n    f.append(\"METHOD\", \"POST\");\n    await axios.post(baseUrl, f)\n    .then(response=>{\n      setData(data.concat(response.data));\n      abrirCerrarModalInsertar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionPut=async()=>{\n    var f = new FormData();\n    f.append(\"nombre\", alumnoSeleccionado.nombre);\n    f.append(\"apellido\", alumnoSeleccionado.apellido);\n    f.append(\"edad\", alumnoSeleccionado.edad);\n    f.append(\"METHOD\", \"PUT\");\n    await axios.post(baseUrl, f, {params: {id: alumnoSeleccionado.id}})\n    .then(response=>{\n      var dataNueva= data;\n      dataNueva.map(alumno=>{\n        if(alumno.id===alumnoSeleccionado.id){\n          alumno.nombre=alumnoSeleccionado.nombre;\n          alumno.apellido=alumnoSeleccionado.apellido;\n          alumno.edad=alumnoSeleccionado.edad;\n        }\n      });\n      setData(dataNueva);\n      abrirCerrarModalEditar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionDelete=async()=>{\n    var f = new FormData();\n    f.append(\"METHOD\", \"DELETE\");\n    await axios.post(baseUrl, f, {params: {id: alumnoSeleccionado.id}})\n    .then(response=>{\n      setData(data.filter(alumno=>alumno.id!==alumnoSeleccionado.id));\n      abrirCerrarModalEliminar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const seleccionarAlumno=(alumno, caso)=>{\n    setalumnoSeleccionado(alumno);\n\n    (caso===\"Editar\")?\n    abrirCerrarModalEditar():\n    abrirCerrarModalEliminar()\n  }\n\n  useEffect(()=>{\n    peticionGet();\n  },[])\n\n  return (\n    <div style={{textAlign: 'center'}}>\n<br />\n      <button className=\"btn btn-success\" onClick={()=>abrirCerrarModalInsertar()}>Insertar</button>\n      <br /><br />\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Nombre</th>\n          <th>apellido</th>\n          <th>edad</th>\n          <th>Acciones</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map(alumno=>(\n          <tr key={alumno.id}>\n            <td>{alumno.id}</td>\n            <td>{alumno.nombre}</td>\n            <td>{alumno.apellido}</td>\n            <td>{alumno.edad}</td>\n          <td>\n          <button className=\"btn btn-primary\" onClick={()=>seleccionarAlumno(alumno, \"Editar\")}>Editar</button> {\"  \"}\n          <button className=\"btn btn-danger\" onClick={()=>seleccionarAlumno(alumno, \"Eliminar\")}>Eliminar</button>\n          </td>\n          </tr>\n        ))}\n\n\n      </tbody> \n\n    </table>\n\n\n    <Modal isOpen={modalInsertar}>\n      <ModalHeader>Insertar alumno</ModalHeader>\n      <ModalBody>\n        <div className=\"form-group\">\n          <label>Nombre: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"nombre\" onChange={handleChange}/>\n          <br />\n          <label>apellido: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"apellido\" onChange={handleChange}/>\n          <br />\n          <label>edad: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"edad\" onChange={handleChange}/>\n          <br />\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={()=>peticionPost()}>Insertar</button>{\"   \"}\n        <button className=\"btn btn-danger\" onClick={()=>abrirCerrarModalInsertar()}>Cancelar</button>\n      </ModalFooter>\n    </Modal>\n\n\n    \n    <Modal isOpen={modalEditar}>\n      <ModalHeader>Editar alumno</ModalHeader>\n      <ModalBody>\n        <div className=\"form-group\">\n          <label>Nombre: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"nombre\" onChange={handleChange} value={alumnoSeleccionado && alumnoSeleccionado.nombre}/>\n          <br />\n          <label>apellido: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"apellido\" onChange={handleChange} value={alumnoSeleccionado && alumnoSeleccionado.apellido}/>\n          <br />\n          <label>edad: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"edad\" onChange={handleChange} value={alumnoSeleccionado && alumnoSeleccionado.edad}/>\n          <br />\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={()=>peticionPut()}>Editar</button>{\"   \"}\n        <button className=\"btn btn-danger\" onClick={()=>abrirCerrarModalEditar()}>Cancelar</button>\n      </ModalFooter>\n    </Modal>\n\n    <Modal isOpen={modalEliminar}>\n        <ModalBody>\n        ¿Estás seguro que deseas eliminar el alumno {alumnoSeleccionado && alumnoSeleccionado.nombre}?\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" onClick={()=>peticionDelete()}>\n            Sí\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            onClick={()=>abrirCerrarModalEliminar()}\n          >\n            No\n          </button>\n        </ModalFooter>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}